class Solution 
{
    public:
     bool DFS(int i,int j,int grid[N][N])
    {
        static int a[]={-1,-1,-1,0,0,1,1,1};
        static int b[]={-1,0,1,-1,1,-1,0,1};
        unordered_set<int>s;
        if(grid[i][j]!=0)
          s.insert(grid[i][j]);
        for(int k=0;k<8;++k)
        {   if(grid[i+a[k]][j+b[k]]==0)
               continue;
            if(s.find(grid[i+a[k]][j+b[k]])!=s.end())
             return false;
            s.insert(grid[i+a[k]][j+b[k]]);
        }
        return true;
    }
    bool isValid(int grid[N][N],int x,int y,int val)
    {  
       for(int i=0;i<9;++i)
       {  if(grid[x][i]==val)
            return false;
       }
       for(int j=0;j<9;++j)
        {  if(grid[j][y]==val)
             return false;
        }
       grid[x][y]=val;
       int m=3*(x/3)+1;
       int n=3*(y/3)+1;
       bool res=DFS(m,n,grid);
       grid[x][y]=val;
       return res;
    }
    bool fun(int i,int j,int grid[N][N]){
       if(j==9)
       {  i=i+1;
          j=0;
       }
       if(9<=i)
         return true;
       if(grid[i][j]!=0)
         return fun(i,j+1,grid);
       for(int k=1;k<=9;++k)
       {  
          if(isValid(grid,i,j,k)==true)
           {   grid[i][j]=k;
               if(fun(i,j+1,grid)==true)
                  return true;
               grid[i][j]=0;
           }
       }
       grid[i][j]=0;
       return false;
    }
    bool SolveSudoku(int grid[N][N])  
    {  return fun(0,0,grid); }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {   
        for(int i=0;i<9;++i)
        {  for(int j=0;j<9;++j)
               cout<<grid[i][j]<<" "; 
        }
    }
